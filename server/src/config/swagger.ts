import swaggerJsdoc from 'swagger-jsdoc';

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Web3 Express API',
      version: '1.0.0',
      description: 'REST API with Web3 wallet authentication using ethers.js v6',
      contact: {
        name: 'API Support',
        email: 'support@example.com',
      },
    },
    servers: [
      {
        url: 'http://localhost:3000',
        description: 'Development server',
      },
    ],
    components: {
      schemas: {
        User: {
          type: 'object',
          properties: {
            id: {
              type: 'integer',
              description: 'Auto-incrementing user ID',
              example: 1,
            },
            address: {
              type: 'string',
              description: 'Ethereum wallet address (42 characters)',
              example: '0x742d35cc6634c0532925a3b8d0c9e3e4c413c123',
              pattern: '^0x[a-fA-F0-9]{40}$',
            },
            status: {
              type: 'string',
              description: 'User status',
              example: 'active',
              default: 'active',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'User creation timestamp',
              example: '2024-01-01T00:00:00.000Z',
            },
            updatedAt: {
              type: 'string',
              format: 'date-time',
              description: 'User last update timestamp',
              example: '2024-01-01T00:00:00.000Z',
            },
          },
          required: ['address'],
        },
        AuthRequest: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Message that was signed by the wallet',
              example: 'Please sign this message to authenticate',
            },
            signature: {
              type: 'string',
              description: 'Signature generated by wallet (130 characters hex string)',
              example: '0x1234567890abcdef...',
              pattern: '^0x[a-fA-F0-9]{130}$',
            },
          },
          required: ['message', 'signature'],
        },
        AuthResponse: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: true,
            },
            data: {
              type: 'object',
              properties: {
                user: {
                  $ref: '#/components/schemas/User',
                },
                address: {
                  type: 'string',
                  description: 'Recovered wallet address from signature',
                  example: '0x742d35Cc6634C0532925a3b8D0C9e3e4c413c123',
                },
                isNewUser: {
                  type: 'boolean',
                  description: 'Whether this is a new user registration',
                  example: true,
                },
              },
            },
            message: {
              type: 'string',
              example: 'Authentication successful',
            },
          },
        },
        UpdateStatusRequest: {
          type: 'object',
          properties: {
            status: {
              type: 'string',
              description: 'New status for the user',
              example: 'inactive',
            },
          },
          required: ['status'],
        },
        SuccessResponse: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: true,
            },
            data: {
              type: 'object',
            },
            message: {
              type: 'string',
            },
          },
        },
        ErrorResponse: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: false,
            },
            error: {
              type: 'string',
              description: 'Error message',
            },
          },
        },
        HealthResponse: {
          type: 'object',
          properties: {
            status: {
              type: 'string',
              example: 'OK',
            },
            message: {
              type: 'string',
              example: 'Server is running!',
            },
          },
        },
      },
    },
    tags: [
      {
        name: 'Users',
        description: 'User management and Web3 authentication endpoints',
      },
      {
        name: 'Health',
        description: 'Server health check endpoints',
      },
    ],
  },
  apis: ['./src/routes/*.ts'], // Path to the API files
};

export const specs = swaggerJsdoc(options);